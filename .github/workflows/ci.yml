---
name: CI

on:
  workflow_call:
    inputs:
      submodules:
        description: Whether to checkout submodules. Use `true` to checkout submodules or `recursive` to recursively checkout submodules -- see https://github.com/actions/checkout
        required: false
        type: string
        default: false
      toolchain:
        description: Rust toolchain specification -- see https://rust-lang.github.io/rustup/concepts/toolchains.html#toolchain-specification
        required: false
        type: string
        default: stable

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: ${{ inputs.submodules }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ inputs.toolchain }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      # Determine if crate is a library by checking for Cargo.lock file
      - name: Construct test command
        id: format-test-command
        env:
          input_test_command: cargo test --locked -- --nocapture
        run: |
          test_command="$input_test_command"

          # Check if Cargo.lock exists in repository root.
          # If no Cargo.lock file, do not specify `--locked` argument.
          if [[ "$input_test_command" == "cargo test --locked -- --nocapture" && ! -f "Cargo.lock" ]]; then
            test_command="${input_test_command//--locked }"
          fi
          echo "test-command=$test_command" >> "$GITHUB_OUTPUT"

      # Separate compilation from testing to accurately report the runtime of each
      - run: cargo test ${{ contains(steps.format-test-command.outputs.test-command, '--locked') && '--locked' || '' }} --no-run

      - run: ${{ steps.format-test-command.outputs.test-command }}
